An unordered_set is implemented using a hash table where keys are hashed into indices of a hash table so that the insertion is always randomized. All operations on the unordered_set takes constant time O(1) on an average which can go up to linear time O(n) in worst case which depends on the internally used hash function, but practically they perform very well and generally provide a constant time lookup operation. 

The unordered_set can contain key of any type â€“ predefined or user-defined data structure but when we define key of type user define the type, we need to specify our comparison function according to which keys will be compared.

Sets vs Unordered Sets 
Set is an ordered sequence of unique keys whereas unordered_set is a set in which key can be stored in any order, so unordered. Set is implemented as a balanced tree structure that is why it is possible to maintain order between the elements (by specific tree traversal). The time complexity of set operations is O(log n) while for unordered_set, it is O(1). 


Methods on Unordered Sets: 
For unordered_set many functions are defined among which most used are the size and empty for capacity, find for searching a key, insert and erase for modification. 
The Unordered_set allows only unique keys, for duplicate keys unordered_multiset should be used.


Various Operations:-

find, insert and erase take constant amount of time on average. The find() function returns an iterator to end() if key is not there in set, otherwise an iterator to the key position is returned. The iterator works as a pointer to the key values so that we can get the key by dereferencing them using * operator.


1.insert() - Insert a new {element} in the unordered_set container.

2.begin() - Return an iterator pointing to the first element in the unordered_set              container.
3.end() - Returns an iterator pointing to the past-the-end-element.

4.count() - Count occurrrences of a particular element in an unordered_set container.

5.find() - Search for an element in the container.

6.clear() - Removes all of the elements from an unordered_set and empties it.

7.size() - Return the number of elements in the unordered_set container.

8.swap() - Exchange values of two unordered_set containers.

9.empty() - Check if an unordered_set container is empty or not.

10.reserve() - Used to request capacity change of unordered_set.

11.erase() - Remove either a single element or a range of elements
             ranging from start(inclusive) to end(exclusive).

12.max_size() - Returns Maximum Number of elements that an Unordered_set container 
                can hold.

13.swap() - Exchange Values of two unordered_set containers.








